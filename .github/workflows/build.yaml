name: PyInstaller Build and Release

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'  # Altere para a versão de Python desejada

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller requests toml

      - name: Build with PyInstaller (no-console)
        run: |
          pyinstaller --onefile --noconsole --icon=./icons/icon.icns Embracedata_Downloader.py
        shell: bash
        
      - name: Make the generated Linux app executable
        run: |
           chmod +x dist/Embracedata_Downloader
        shell: bash
      
      - name: Upload Artifact (Binary)
        uses: actions/upload-artifact@v3
        with:
          name: Embracedata_Downloader-${{ matrix.os }}
          path: dist/Embracedata_Downloader*

  build-windows:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'  # Altere para a versão de Python desejada

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller requests toml

      - name: Build with PyInstaller (no-console)
        run: |
          pyinstaller --onefile --noconsole --icon=./icons/icon.ico Embracedata_Downloader.py

      - name: Upload Artifact (Binary)
        uses: actions/upload-artifact@v3
        with:
          name: Embracedata_Downloader-windows
          path: dist/Embracedata_Downloader.exe

  release:
    needs: [ build, build-windows ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.12'  # ou a versão que você estiver usando

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install toml

      - name: Extract version from pyproject.toml
        id: extract_version
        run: |
          VERSION=$(python -c "import toml; print(toml.load('pyproject.toml')['tool']['poetry']['version'])")
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Download Linux Artifact
        uses: actions/download-artifact@v3
        with:
          name: Embracedata_Downloader-ubuntu-latest
          path: ./artifacts/linux


      - name: Download macOS Artifact
        uses: actions/download-artifact@v3
        with:
          name: Embracedata_Downloader-macos-latest
          path: ./artifacts/macos


      - name: Download Windows Artifact
        uses: actions/download-artifact@v3
        with:
          name: Embracedata_Downloader-windows
          path: ./artifacts/windows
          # github-token: ${{ secrets.TOKEN }}  # Removido

      - name: Check if version exists
        id: check_version
        run: |
            VERSION_TAG="v${{ env.VERSION }}"
            TAGS=$(curl -s -H "Authorization: token ${{ secrets.TOKEN }}" "https://api.github.com/repos/${{ github.repository }}/tags")
            if echo "$TAGS" | grep -q "\"name\": \"$VERSION_TAG\""; then
              echo "Version $VERSION_TAG already exists. Skipping release."
              echo "release_exists=true" >> $GITHUB_ENV
            else
              echo "release_exists=false" >> $GITHUB_ENV
            fi
  
      - name: Create GitHub Release
        id: create_release
        if: env.release_exists == 'false'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}  # Token adicionado aqui
        with:
          tag_name: v${{ env.VERSION }}
          release_name: Release v${{ env.VERSION }}
          draft: false
          prerelease: false

      - name: Upload Release Assets (Linux)
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/linux/Embracedata_Downloader
          asset_name: Embracedata_Downloader-linux
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}  # Token para upload

      - name: Upload Release Assets (macOS)
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/macos/Embracedata_Downloader
          asset_name: Embracedata_Downloader-macos
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}  # Token para upload

      - name: Upload Release Assets (Windows)
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/windows/Embracedata_Downloader.exe
          asset_name: Embracedata_Downloader-windows.exe
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}  # Token para upload
